// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: proto/runner.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  type ClientUnaryCall,
  handleBidiStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export enum ArgumentType {
  STRING = 0,
  INT = 1,
  FLOAT = 2,
  BOOL = 3,
  WRITER = 4,
  READER = 5,
  UNRECOGNIZED = -1,
}

export function argumentTypeFromJSON(object: any): ArgumentType {
  switch (object) {
    case 0:
    case "STRING":
      return ArgumentType.STRING;
    case 1:
    case "INT":
      return ArgumentType.INT;
    case 2:
    case "FLOAT":
      return ArgumentType.FLOAT;
    case 3:
    case "BOOL":
      return ArgumentType.BOOL;
    case 4:
    case "WRITER":
      return ArgumentType.WRITER;
    case 5:
    case "READER":
      return ArgumentType.READER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ArgumentType.UNRECOGNIZED;
  }
}

export function argumentTypeToJSON(object: ArgumentType): string {
  switch (object) {
    case ArgumentType.STRING:
      return "STRING";
    case ArgumentType.INT:
      return "INT";
    case ArgumentType.FLOAT:
      return "FLOAT";
    case ArgumentType.BOOL:
      return "BOOL";
    case ArgumentType.WRITER:
      return "WRITER";
    case ArgumentType.READER:
      return "READER";
    case ArgumentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Void {}

export interface Processor {
  uri: string;
  arguments: { [key: string]: ArgumentType };
  metadata: { [key: string]: string };
}

export interface Processor_ArgumentsEntry {
  key: string;
  value: ArgumentType;
}

export interface Processor_MetadataEntry {
  key: string;
  value: string;
}

export interface Argument {
  type: ArgumentType;
  value: Uint8Array;
}

export interface Stage {
  uri: string;
  processorUri: string;
  arguments: { [key: string]: Argument };
}

export interface Stage_ArgumentsEntry {
  key: string;
  value: Argument | undefined;
}

export interface Payload {
  channelUri: string;
  data: Uint8Array;
}

function createBaseVoid(): Void {
  return {};
}

export const Void = {
  encode(_: Void, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Void {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Void {
    return {};
  },

  toJSON(_: Void): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Void>, I>>(base?: I): Void {
    return Void.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Void>, I>>(_: I): Void {
    const message = createBaseVoid();
    return message;
  },
};

function createBaseProcessor(): Processor {
  return { uri: "", arguments: {}, metadata: {} };
}

export const Processor = {
  encode(
    message: Processor,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    Object.entries(message.arguments).forEach(([key, value]) => {
      Processor_ArgumentsEntry.encode(
        { key: key as any, value },
        writer.uint32(18).fork(),
      ).ldelim();
    });
    Object.entries(message.metadata).forEach(([key, value]) => {
      Processor_MetadataEntry.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Processor {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Processor_ArgumentsEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry2.value !== undefined) {
            message.arguments[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Processor_MetadataEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Processor {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      arguments: isObject(object.arguments)
        ? Object.entries(object.arguments).reduce<{
            [key: string]: ArgumentType;
          }>((acc, [key, value]) => {
            acc[key] = argumentTypeFromJSON(value);
            return acc;
          }, {})
        : {},
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: Processor): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.arguments) {
      const entries = Object.entries(message.arguments);
      if (entries.length > 0) {
        obj.arguments = {};
        entries.forEach(([k, v]) => {
          obj.arguments[k] = argumentTypeToJSON(v);
        });
      }
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Processor>, I>>(base?: I): Processor {
    return Processor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Processor>, I>>(
    object: I,
  ): Processor {
    const message = createBaseProcessor();
    message.uri = object.uri ?? "";
    message.arguments = Object.entries(object.arguments ?? {}).reduce<{
      [key: string]: ArgumentType;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value as ArgumentType;
      }
      return acc;
    }, {});
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseProcessor_ArgumentsEntry(): Processor_ArgumentsEntry {
  return { key: "", value: 0 };
}

export const Processor_ArgumentsEntry = {
  encode(
    message: Processor_ArgumentsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): Processor_ArgumentsEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessor_ArgumentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Processor_ArgumentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? argumentTypeFromJSON(object.value) : 0,
    };
  },

  toJSON(message: Processor_ArgumentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = argumentTypeToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Processor_ArgumentsEntry>, I>>(
    base?: I,
  ): Processor_ArgumentsEntry {
    return Processor_ArgumentsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Processor_ArgumentsEntry>, I>>(
    object: I,
  ): Processor_ArgumentsEntry {
    const message = createBaseProcessor_ArgumentsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseProcessor_MetadataEntry(): Processor_MetadataEntry {
  return { key: "", value: "" };
}

export const Processor_MetadataEntry = {
  encode(
    message: Processor_MetadataEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): Processor_MetadataEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessor_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Processor_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Processor_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Processor_MetadataEntry>, I>>(
    base?: I,
  ): Processor_MetadataEntry {
    return Processor_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Processor_MetadataEntry>, I>>(
    object: I,
  ): Processor_MetadataEntry {
    const message = createBaseProcessor_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseArgument(): Argument {
  return { type: 0, value: new Uint8Array(0) };
}

export const Argument = {
  encode(
    message: Argument,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Argument {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Argument {
    return {
      type: isSet(object.type) ? argumentTypeFromJSON(object.type) : 0,
      value: isSet(object.value)
        ? bytesFromBase64(object.value)
        : new Uint8Array(0),
    };
  },

  toJSON(message: Argument): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = argumentTypeToJSON(message.type);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Argument>, I>>(base?: I): Argument {
    return Argument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Argument>, I>>(object: I): Argument {
    const message = createBaseArgument();
    message.type = object.type ?? 0;
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseStage(): Stage {
  return { uri: "", processorUri: "", arguments: {} };
}

export const Stage = {
  encode(message: Stage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.processorUri !== "") {
      writer.uint32(18).string(message.processorUri);
    }
    Object.entries(message.arguments).forEach(([key, value]) => {
      Stage_ArgumentsEntry.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stage {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processorUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Stage_ArgumentsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.arguments[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stage {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      processorUri: isSet(object.processorUri)
        ? globalThis.String(object.processorUri)
        : "",
      arguments: isObject(object.arguments)
        ? Object.entries(object.arguments).reduce<{ [key: string]: Argument }>(
            (acc, [key, value]) => {
              acc[key] = Argument.fromJSON(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: Stage): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.processorUri !== "") {
      obj.processorUri = message.processorUri;
    }
    if (message.arguments) {
      const entries = Object.entries(message.arguments);
      if (entries.length > 0) {
        obj.arguments = {};
        entries.forEach(([k, v]) => {
          obj.arguments[k] = Argument.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stage>, I>>(base?: I): Stage {
    return Stage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stage>, I>>(object: I): Stage {
    const message = createBaseStage();
    message.uri = object.uri ?? "";
    message.processorUri = object.processorUri ?? "";
    message.arguments = Object.entries(object.arguments ?? {}).reduce<{
      [key: string]: Argument;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Argument.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseStage_ArgumentsEntry(): Stage_ArgumentsEntry {
  return { key: "", value: undefined };
}

export const Stage_ArgumentsEntry = {
  encode(
    message: Stage_ArgumentsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Argument.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): Stage_ArgumentsEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStage_ArgumentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Argument.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stage_ArgumentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Argument.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Stage_ArgumentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Argument.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stage_ArgumentsEntry>, I>>(
    base?: I,
  ): Stage_ArgumentsEntry {
    return Stage_ArgumentsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stage_ArgumentsEntry>, I>>(
    object: I,
  ): Stage_ArgumentsEntry {
    const message = createBaseStage_ArgumentsEntry();
    message.key = object.key ?? "";
    message.value =
      object.value !== undefined && object.value !== null
        ? Argument.fromPartial(object.value)
        : undefined;
    return message;
  },
};

function createBasePayload(): Payload {
  return { channelUri: "", data: new Uint8Array(0) };
}

export const Payload = {
  encode(
    message: Payload,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.channelUri !== "") {
      writer.uint32(10).string(message.channelUri);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Payload {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payload {
    return {
      channelUri: isSet(object.channelUri)
        ? globalThis.String(object.channelUri)
        : "",
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: Payload): unknown {
    const obj: any = {};
    if (message.channelUri !== "") {
      obj.channelUri = message.channelUri;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payload>, I>>(base?: I): Payload {
    return Payload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payload>, I>>(object: I): Payload {
    const message = createBasePayload();
    message.channelUri = object.channelUri ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

export type RunnerService = typeof RunnerService;
export const RunnerService = {
  prepareProcessor: {
    path: "/Runner/prepareProcessor",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Processor) =>
      Buffer.from(Processor.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Processor.decode(value),
    responseSerialize: (value: Void) =>
      Buffer.from(Void.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Void.decode(value),
  },
  prepareStage: {
    path: "/Runner/prepareStage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Stage) =>
      Buffer.from(Stage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Stage.decode(value),
    responseSerialize: (value: Void) =>
      Buffer.from(Void.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Void.decode(value),
  },
  exec: {
    path: "/Runner/exec",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Void) => Buffer.from(Void.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Void.decode(value),
    responseSerialize: (value: Void) =>
      Buffer.from(Void.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Void.decode(value),
  },
  channel: {
    path: "/Runner/channel",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: Payload) =>
      Buffer.from(Payload.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Payload.decode(value),
    responseSerialize: (value: Payload) =>
      Buffer.from(Payload.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Payload.decode(value),
  },
} as const;

export interface RunnerServer extends UntypedServiceImplementation {
  prepareProcessor: handleUnaryCall<Processor, Void>;
  prepareStage: handleUnaryCall<Stage, Void>;
  exec: handleUnaryCall<Void, Void>;
  channel: handleBidiStreamingCall<Payload, Payload>;
}

export interface RunnerClient extends Client {
  prepareProcessor(
    request: Processor,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  prepareProcessor(
    request: Processor,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  prepareProcessor(
    request: Processor,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  prepareStage(
    request: Stage,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  prepareStage(
    request: Stage,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  prepareStage(
    request: Stage,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  exec(
    request: Void,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  exec(
    request: Void,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  exec(
    request: Void,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  channel(): ClientDuplexStream<Payload, Payload>;
  channel(options: Partial<CallOptions>): ClientDuplexStream<Payload, Payload>;
  channel(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<Payload, Payload>;
}

export const RunnerClient = makeGenericClientConstructor(
  RunnerService,
  "Runner",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): RunnerClient;
  service: typeof RunnerService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
