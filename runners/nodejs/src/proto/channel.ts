// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: channel.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "rdfc";

export enum ChannelMessageType {
  DATA = 0,
  CLOSE = 1,
  UNRECOGNIZED = -1,
}

export function channelMessageTypeFromJSON(object: any): ChannelMessageType {
  switch (object) {
    case 0:
    case "DATA":
      return ChannelMessageType.DATA;
    case 1:
    case "CLOSE":
      return ChannelMessageType.CLOSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChannelMessageType.UNRECOGNIZED;
  }
}

export function channelMessageTypeToJSON(object: ChannelMessageType): string {
  switch (object) {
    case ChannelMessageType.DATA:
      return "DATA";
    case ChannelMessageType.CLOSE:
      return "CLOSE";
    case ChannelMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Channel {
  uri: string;
}

export interface ChannelData {
  bytes: Uint8Array;
}

export interface ChannelMessage {
  channel: Channel | undefined;
  type: ChannelMessageType;
  data?: ChannelData | undefined;
}

function createBaseChannel(): Channel {
  return { uri: "" };
}

export const Channel = {
  encode(
    message: Channel,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Channel {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channel>, I>>(base?: I): Channel {
    return Channel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channel>, I>>(object: I): Channel {
    const message = createBaseChannel();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseChannelData(): ChannelData {
  return { bytes: new Uint8Array(0) };
}

export const ChannelData = {
  encode(
    message: ChannelData,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.bytes.length !== 0) {
      writer.uint32(10).bytes(message.bytes);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelData {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bytes = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelData {
    return {
      bytes: isSet(object.bytes)
        ? bytesFromBase64(object.bytes)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ChannelData): unknown {
    const obj: any = {};
    if (message.bytes.length !== 0) {
      obj.bytes = base64FromBytes(message.bytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelData>, I>>(base?: I): ChannelData {
    return ChannelData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelData>, I>>(
    object: I,
  ): ChannelData {
    const message = createBaseChannelData();
    message.bytes = object.bytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseChannelMessage(): ChannelMessage {
  return { channel: undefined, type: 0, data: undefined };
}

export const ChannelMessage = {
  encode(
    message: ChannelMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(10).fork()).ldelim();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.data !== undefined) {
      ChannelData.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChannelMessage {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = ChannelData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelMessage {
    return {
      channel: isSet(object.channel)
        ? Channel.fromJSON(object.channel)
        : undefined,
      type: isSet(object.type) ? channelMessageTypeFromJSON(object.type) : 0,
      data: isSet(object.data) ? ChannelData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ChannelMessage): unknown {
    const obj: any = {};
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.type !== 0) {
      obj.type = channelMessageTypeToJSON(message.type);
    }
    if (message.data !== undefined) {
      obj.data = ChannelData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChannelMessage>, I>>(
    base?: I,
  ): ChannelMessage {
    return ChannelMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChannelMessage>, I>>(
    object: I,
  ): ChannelMessage {
    const message = createBaseChannelMessage();
    message.channel =
      object.channel !== undefined && object.channel !== null
        ? Channel.fromPartial(object.channel)
        : undefined;
    message.type = object.type ?? 0;
    message.data =
      object.data !== undefined && object.data !== null
        ? ChannelData.fromPartial(object.data)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
