// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: intermediate.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "";

export enum IRParameterType {
  BOOLEAN = 0,
  BYTE = 1,
  DATE = 2,
  DOUBLE = 3,
  FLOAT = 4,
  INT = 5,
  LONG = 6,
  STRING = 7,
  WRITER = 8,
  READER = 9,
  UNRECOGNIZED = -1,
}

export function iRParameterTypeFromJSON(object: any): IRParameterType {
  switch (object) {
    case 0:
    case "BOOLEAN":
      return IRParameterType.BOOLEAN;
    case 1:
    case "BYTE":
      return IRParameterType.BYTE;
    case 2:
    case "DATE":
      return IRParameterType.DATE;
    case 3:
    case "DOUBLE":
      return IRParameterType.DOUBLE;
    case 4:
    case "FLOAT":
      return IRParameterType.FLOAT;
    case 5:
    case "INT":
      return IRParameterType.INT;
    case 6:
    case "LONG":
      return IRParameterType.LONG;
    case 7:
    case "STRING":
      return IRParameterType.STRING;
    case 8:
    case "WRITER":
      return IRParameterType.WRITER;
    case 9:
    case "READER":
      return IRParameterType.READER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterType.UNRECOGNIZED;
  }
}

export function iRParameterTypeToJSON(object: IRParameterType): string {
  switch (object) {
    case IRParameterType.BOOLEAN:
      return "BOOLEAN";
    case IRParameterType.BYTE:
      return "BYTE";
    case IRParameterType.DATE:
      return "DATE";
    case IRParameterType.DOUBLE:
      return "DOUBLE";
    case IRParameterType.FLOAT:
      return "FLOAT";
    case IRParameterType.INT:
      return "INT";
    case IRParameterType.LONG:
      return "LONG";
    case IRParameterType.STRING:
      return "STRING";
    case IRParameterType.WRITER:
      return "WRITER";
    case IRParameterType.READER:
      return "READER";
    case IRParameterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IRParameterPresence {
  OPTIONAL = 0,
  REQUIRED = 1,
  UNRECOGNIZED = -1,
}

export function iRParameterPresenceFromJSON(object: any): IRParameterPresence {
  switch (object) {
    case 0:
    case "OPTIONAL":
      return IRParameterPresence.OPTIONAL;
    case 1:
    case "REQUIRED":
      return IRParameterPresence.REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterPresence.UNRECOGNIZED;
  }
}

export function iRParameterPresenceToJSON(object: IRParameterPresence): string {
  switch (object) {
    case IRParameterPresence.OPTIONAL:
      return "OPTIONAL";
    case IRParameterPresence.REQUIRED:
      return "REQUIRED";
    case IRParameterPresence.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IRParameterCount {
  SINGLE = 0,
  LIST = 1,
  UNRECOGNIZED = -1,
}

export function iRParameterCountFromJSON(object: any): IRParameterCount {
  switch (object) {
    case 0:
    case "SINGLE":
      return IRParameterCount.SINGLE;
    case 1:
    case "LIST":
      return IRParameterCount.LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterCount.UNRECOGNIZED;
  }
}

export function iRParameterCountToJSON(object: IRParameterCount): string {
  switch (object) {
    case IRParameterCount.SINGLE:
      return "SINGLE";
    case IRParameterCount.LIST:
      return "LIST";
    case IRParameterCount.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IRParameters {
  parameters: { [key: string]: IRParameter };
}

export interface IRParameters_ParametersEntry {
  key: string;
  value: IRParameter | undefined;
}

export interface IRParameter {
  simple?: IRParameterType | undefined;
  complex?: IRParameters | undefined;
  presence: IRParameterPresence;
  count: IRParameterCount;
}

export interface IRProcessor {
  uri: string;
  entrypoint: string;
  parameters: { [key: string]: IRParameter };
  metadata: { [key: string]: string };
}

export interface IRProcessor_ParametersEntry {
  key: string;
  value: IRParameter | undefined;
}

export interface IRProcessor_MetadataEntry {
  key: string;
  value: string;
}

export interface IRArgumentSimple {
  value: string[];
}

export interface IRArgumentMap {
  arguments: { [key: string]: IRArgument };
}

export interface IRArgumentMap_ArgumentsEntry {
  key: string;
  value: IRArgument | undefined;
}

export interface IRArgumentComplex {
  value: IRArgumentMap[];
}

export interface IRArgument {
  simple?: IRArgumentSimple | undefined;
  complex?: IRArgumentComplex | undefined;
}

export interface IRStage {
  uri: string;
  processor: IRProcessor | undefined;
  arguments: { [key: string]: IRArgument };
}

export interface IRStage_ArgumentsEntry {
  key: string;
  value: IRArgument | undefined;
}

function createBaseIRParameters(): IRParameters {
  return { parameters: {} };
}

export const IRParameters = {
  encode(message: IRParameters, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.parameters).forEach(([key, value]) => {
      IRParameters_ParametersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRParameters {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = IRParameters_ParametersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.parameters[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRParameters {
    return {
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: IRParameter }>((acc, [key, value]) => {
          acc[key] = IRParameter.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IRParameters): unknown {
    const obj: any = {};
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = IRParameter.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRParameters>, I>>(base?: I): IRParameters {
    return IRParameters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRParameters>, I>>(object: I): IRParameters {
    const message = createBaseIRParameters();
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: IRParameter }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = IRParameter.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseIRParameters_ParametersEntry(): IRParameters_ParametersEntry {
  return { key: "", value: undefined };
}

export const IRParameters_ParametersEntry = {
  encode(message: IRParameters_ParametersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      IRParameter.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRParameters_ParametersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRParameters_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = IRParameter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRParameters_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? IRParameter.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: IRParameters_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = IRParameter.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRParameters_ParametersEntry>, I>>(base?: I): IRParameters_ParametersEntry {
    return IRParameters_ParametersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRParameters_ParametersEntry>, I>>(object: I): IRParameters_ParametersEntry {
    const message = createBaseIRParameters_ParametersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? IRParameter.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseIRParameter(): IRParameter {
  return { simple: undefined, complex: undefined, presence: 0, count: 0 };
}

export const IRParameter = {
  encode(message: IRParameter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.simple !== undefined) {
      writer.uint32(8).int32(message.simple);
    }
    if (message.complex !== undefined) {
      IRParameters.encode(message.complex, writer.uint32(18).fork()).ldelim();
    }
    if (message.presence !== 0) {
      writer.uint32(24).int32(message.presence);
    }
    if (message.count !== 0) {
      writer.uint32(32).int32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRParameter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.simple = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.complex = IRParameters.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.presence = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRParameter {
    return {
      simple: isSet(object.simple) ? iRParameterTypeFromJSON(object.simple) : undefined,
      complex: isSet(object.complex) ? IRParameters.fromJSON(object.complex) : undefined,
      presence: isSet(object.presence) ? iRParameterPresenceFromJSON(object.presence) : 0,
      count: isSet(object.count) ? iRParameterCountFromJSON(object.count) : 0,
    };
  },

  toJSON(message: IRParameter): unknown {
    const obj: any = {};
    if (message.simple !== undefined) {
      obj.simple = iRParameterTypeToJSON(message.simple);
    }
    if (message.complex !== undefined) {
      obj.complex = IRParameters.toJSON(message.complex);
    }
    if (message.presence !== 0) {
      obj.presence = iRParameterPresenceToJSON(message.presence);
    }
    if (message.count !== 0) {
      obj.count = iRParameterCountToJSON(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRParameter>, I>>(base?: I): IRParameter {
    return IRParameter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRParameter>, I>>(object: I): IRParameter {
    const message = createBaseIRParameter();
    message.simple = object.simple ?? undefined;
    message.complex = (object.complex !== undefined && object.complex !== null)
      ? IRParameters.fromPartial(object.complex)
      : undefined;
    message.presence = object.presence ?? 0;
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseIRProcessor(): IRProcessor {
  return { uri: "", entrypoint: "", parameters: {}, metadata: {} };
}

export const IRProcessor = {
  encode(message: IRProcessor, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.entrypoint !== "") {
      writer.uint32(18).string(message.entrypoint);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      IRProcessor_ParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    Object.entries(message.metadata).forEach(([key, value]) => {
      IRProcessor_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRProcessor {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRProcessor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entrypoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = IRProcessor_ParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.parameters[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = IRProcessor_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRProcessor {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      entrypoint: isSet(object.entrypoint) ? globalThis.String(object.entrypoint) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: IRParameter }>((acc, [key, value]) => {
          acc[key] = IRParameter.fromJSON(value);
          return acc;
        }, {})
        : {},
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IRProcessor): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.entrypoint !== "") {
      obj.entrypoint = message.entrypoint;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = IRParameter.toJSON(v);
        });
      }
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRProcessor>, I>>(base?: I): IRProcessor {
    return IRProcessor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRProcessor>, I>>(object: I): IRProcessor {
    const message = createBaseIRProcessor();
    message.uri = object.uri ?? "";
    message.entrypoint = object.entrypoint ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: IRParameter }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = IRParameter.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseIRProcessor_ParametersEntry(): IRProcessor_ParametersEntry {
  return { key: "", value: undefined };
}

export const IRProcessor_ParametersEntry = {
  encode(message: IRProcessor_ParametersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      IRParameter.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRProcessor_ParametersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRProcessor_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = IRParameter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRProcessor_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? IRParameter.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: IRProcessor_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = IRParameter.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRProcessor_ParametersEntry>, I>>(base?: I): IRProcessor_ParametersEntry {
    return IRProcessor_ParametersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRProcessor_ParametersEntry>, I>>(object: I): IRProcessor_ParametersEntry {
    const message = createBaseIRProcessor_ParametersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? IRParameter.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseIRProcessor_MetadataEntry(): IRProcessor_MetadataEntry {
  return { key: "", value: "" };
}

export const IRProcessor_MetadataEntry = {
  encode(message: IRProcessor_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRProcessor_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRProcessor_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRProcessor_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: IRProcessor_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRProcessor_MetadataEntry>, I>>(base?: I): IRProcessor_MetadataEntry {
    return IRProcessor_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRProcessor_MetadataEntry>, I>>(object: I): IRProcessor_MetadataEntry {
    const message = createBaseIRProcessor_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseIRArgumentSimple(): IRArgumentSimple {
  return { value: [] };
}

export const IRArgumentSimple = {
  encode(message: IRArgumentSimple, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.value) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgumentSimple {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgumentSimple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgumentSimple {
    return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: IRArgumentSimple): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgumentSimple>, I>>(base?: I): IRArgumentSimple {
    return IRArgumentSimple.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgumentSimple>, I>>(object: I): IRArgumentSimple {
    const message = createBaseIRArgumentSimple();
    message.value = object.value?.map((e) => e) || [];
    return message;
  },
};

function createBaseIRArgumentMap(): IRArgumentMap {
  return { arguments: {} };
}

export const IRArgumentMap = {
  encode(message: IRArgumentMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.arguments).forEach(([key, value]) => {
      IRArgumentMap_ArgumentsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgumentMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgumentMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = IRArgumentMap_ArgumentsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.arguments[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgumentMap {
    return {
      arguments: isObject(object.arguments)
        ? Object.entries(object.arguments).reduce<{ [key: string]: IRArgument }>((acc, [key, value]) => {
          acc[key] = IRArgument.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IRArgumentMap): unknown {
    const obj: any = {};
    if (message.arguments) {
      const entries = Object.entries(message.arguments);
      if (entries.length > 0) {
        obj.arguments = {};
        entries.forEach(([k, v]) => {
          obj.arguments[k] = IRArgument.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgumentMap>, I>>(base?: I): IRArgumentMap {
    return IRArgumentMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgumentMap>, I>>(object: I): IRArgumentMap {
    const message = createBaseIRArgumentMap();
    message.arguments = Object.entries(object.arguments ?? {}).reduce<{ [key: string]: IRArgument }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = IRArgument.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseIRArgumentMap_ArgumentsEntry(): IRArgumentMap_ArgumentsEntry {
  return { key: "", value: undefined };
}

export const IRArgumentMap_ArgumentsEntry = {
  encode(message: IRArgumentMap_ArgumentsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      IRArgument.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgumentMap_ArgumentsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgumentMap_ArgumentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = IRArgument.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgumentMap_ArgumentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? IRArgument.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: IRArgumentMap_ArgumentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = IRArgument.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgumentMap_ArgumentsEntry>, I>>(base?: I): IRArgumentMap_ArgumentsEntry {
    return IRArgumentMap_ArgumentsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgumentMap_ArgumentsEntry>, I>>(object: I): IRArgumentMap_ArgumentsEntry {
    const message = createBaseIRArgumentMap_ArgumentsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? IRArgument.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseIRArgumentComplex(): IRArgumentComplex {
  return { value: [] };
}

export const IRArgumentComplex = {
  encode(message: IRArgumentComplex, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.value) {
      IRArgumentMap.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgumentComplex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgumentComplex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value.push(IRArgumentMap.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgumentComplex {
    return {
      value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => IRArgumentMap.fromJSON(e)) : [],
    };
  },

  toJSON(message: IRArgumentComplex): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value.map((e) => IRArgumentMap.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgumentComplex>, I>>(base?: I): IRArgumentComplex {
    return IRArgumentComplex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgumentComplex>, I>>(object: I): IRArgumentComplex {
    const message = createBaseIRArgumentComplex();
    message.value = object.value?.map((e) => IRArgumentMap.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIRArgument(): IRArgument {
  return { simple: undefined, complex: undefined };
}

export const IRArgument = {
  encode(message: IRArgument, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.simple !== undefined) {
      IRArgumentSimple.encode(message.simple, writer.uint32(10).fork()).ldelim();
    }
    if (message.complex !== undefined) {
      IRArgumentComplex.encode(message.complex, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgument {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.simple = IRArgumentSimple.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.complex = IRArgumentComplex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgument {
    return {
      simple: isSet(object.simple) ? IRArgumentSimple.fromJSON(object.simple) : undefined,
      complex: isSet(object.complex) ? IRArgumentComplex.fromJSON(object.complex) : undefined,
    };
  },

  toJSON(message: IRArgument): unknown {
    const obj: any = {};
    if (message.simple !== undefined) {
      obj.simple = IRArgumentSimple.toJSON(message.simple);
    }
    if (message.complex !== undefined) {
      obj.complex = IRArgumentComplex.toJSON(message.complex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgument>, I>>(base?: I): IRArgument {
    return IRArgument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgument>, I>>(object: I): IRArgument {
    const message = createBaseIRArgument();
    message.simple = (object.simple !== undefined && object.simple !== null)
      ? IRArgumentSimple.fromPartial(object.simple)
      : undefined;
    message.complex = (object.complex !== undefined && object.complex !== null)
      ? IRArgumentComplex.fromPartial(object.complex)
      : undefined;
    return message;
  },
};

function createBaseIRStage(): IRStage {
  return { uri: "", processor: undefined, arguments: {} };
}

export const IRStage = {
  encode(message: IRStage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.processor !== undefined) {
      IRProcessor.encode(message.processor, writer.uint32(18).fork()).ldelim();
    }
    Object.entries(message.arguments).forEach(([key, value]) => {
      IRStage_ArgumentsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRStage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRStage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processor = IRProcessor.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = IRStage_ArgumentsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.arguments[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRStage {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      processor: isSet(object.processor) ? IRProcessor.fromJSON(object.processor) : undefined,
      arguments: isObject(object.arguments)
        ? Object.entries(object.arguments).reduce<{ [key: string]: IRArgument }>((acc, [key, value]) => {
          acc[key] = IRArgument.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IRStage): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.processor !== undefined) {
      obj.processor = IRProcessor.toJSON(message.processor);
    }
    if (message.arguments) {
      const entries = Object.entries(message.arguments);
      if (entries.length > 0) {
        obj.arguments = {};
        entries.forEach(([k, v]) => {
          obj.arguments[k] = IRArgument.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRStage>, I>>(base?: I): IRStage {
    return IRStage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRStage>, I>>(object: I): IRStage {
    const message = createBaseIRStage();
    message.uri = object.uri ?? "";
    message.processor = (object.processor !== undefined && object.processor !== null)
      ? IRProcessor.fromPartial(object.processor)
      : undefined;
    message.arguments = Object.entries(object.arguments ?? {}).reduce<{ [key: string]: IRArgument }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = IRArgument.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseIRStage_ArgumentsEntry(): IRStage_ArgumentsEntry {
  return { key: "", value: undefined };
}

export const IRStage_ArgumentsEntry = {
  encode(message: IRStage_ArgumentsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      IRArgument.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRStage_ArgumentsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRStage_ArgumentsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = IRArgument.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRStage_ArgumentsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? IRArgument.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: IRStage_ArgumentsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = IRArgument.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRStage_ArgumentsEntry>, I>>(base?: I): IRStage_ArgumentsEntry {
    return IRStage_ArgumentsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRStage_ArgumentsEntry>, I>>(object: I): IRStage_ArgumentsEntry {
    const message = createBaseIRStage_ArgumentsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? IRArgument.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
