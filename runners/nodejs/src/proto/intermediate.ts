// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: intermediate.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export enum IRParameterType {
  BOOLEAN = 0,
  BYTE = 1,
  DATE = 2,
  DOUBLE = 3,
  FLOAT = 4,
  INT = 5,
  LONG = 6,
  STRING = 7,
  WRITER = 8,
  READER = 9,
  UNRECOGNIZED = -1,
}

export function iRParameterTypeFromJSON(object: any): IRParameterType {
  switch (object) {
    case 0:
    case "BOOLEAN":
      return IRParameterType.BOOLEAN;
    case 1:
    case "BYTE":
      return IRParameterType.BYTE;
    case 2:
    case "DATE":
      return IRParameterType.DATE;
    case 3:
    case "DOUBLE":
      return IRParameterType.DOUBLE;
    case 4:
    case "FLOAT":
      return IRParameterType.FLOAT;
    case 5:
    case "INT":
      return IRParameterType.INT;
    case 6:
    case "LONG":
      return IRParameterType.LONG;
    case 7:
    case "STRING":
      return IRParameterType.STRING;
    case 8:
    case "WRITER":
      return IRParameterType.WRITER;
    case 9:
    case "READER":
      return IRParameterType.READER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterType.UNRECOGNIZED;
  }
}

export function iRParameterTypeToJSON(object: IRParameterType): string {
  switch (object) {
    case IRParameterType.BOOLEAN:
      return "BOOLEAN";
    case IRParameterType.BYTE:
      return "BYTE";
    case IRParameterType.DATE:
      return "DATE";
    case IRParameterType.DOUBLE:
      return "DOUBLE";
    case IRParameterType.FLOAT:
      return "FLOAT";
    case IRParameterType.INT:
      return "INT";
    case IRParameterType.LONG:
      return "LONG";
    case IRParameterType.STRING:
      return "STRING";
    case IRParameterType.WRITER:
      return "WRITER";
    case IRParameterType.READER:
      return "READER";
    case IRParameterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IRParameterPresence {
  OPTIONAL = 0,
  REQUIRED = 1,
  UNRECOGNIZED = -1,
}

export function iRParameterPresenceFromJSON(object: any): IRParameterPresence {
  switch (object) {
    case 0:
    case "OPTIONAL":
      return IRParameterPresence.OPTIONAL;
    case 1:
    case "REQUIRED":
      return IRParameterPresence.REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterPresence.UNRECOGNIZED;
  }
}

export function iRParameterPresenceToJSON(object: IRParameterPresence): string {
  switch (object) {
    case IRParameterPresence.OPTIONAL:
      return "OPTIONAL";
    case IRParameterPresence.REQUIRED:
      return "REQUIRED";
    case IRParameterPresence.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IRParameterCount {
  SINGLE = 0,
  LIST = 1,
  UNRECOGNIZED = -1,
}

export function iRParameterCountFromJSON(object: any): IRParameterCount {
  switch (object) {
    case 0:
    case "SINGLE":
      return IRParameterCount.SINGLE;
    case 1:
    case "LIST":
      return IRParameterCount.LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IRParameterCount.UNRECOGNIZED;
  }
}

export function iRParameterCountToJSON(object: IRParameterCount): string {
  switch (object) {
    case IRParameterCount.SINGLE:
      return "SINGLE";
    case IRParameterCount.LIST:
      return "LIST";
    case IRParameterCount.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IRParameter {
  name: string;
  type: IRParameterType;
  presence: IRParameterPresence;
  count: IRParameterCount;
}

export interface IRProcessor {
  uri: string;
  parameters: IRParameter[];
  metadata: { [key: string]: string };
}

export interface IRProcessor_MetadataEntry {
  key: string;
  value: string;
}

export interface IRArgument {
  name: string;
  value: string[];
}

export interface IRStage {
  uri: string;
  processorUri: string;
  arguments: IRArgument[];
}

function createBaseIRParameter(): IRParameter {
  return { name: "", type: 0, presence: 0, count: 0 };
}

export const IRParameter = {
  encode(
    message: IRParameter,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.presence !== 0) {
      writer.uint32(24).int32(message.presence);
    }
    if (message.count !== 0) {
      writer.uint32(32).int32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRParameter {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.presence = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRParameter {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? iRParameterTypeFromJSON(object.type) : 0,
      presence: isSet(object.presence)
        ? iRParameterPresenceFromJSON(object.presence)
        : 0,
      count: isSet(object.count) ? iRParameterCountFromJSON(object.count) : 0,
    };
  },

  toJSON(message: IRParameter): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = iRParameterTypeToJSON(message.type);
    }
    if (message.presence !== 0) {
      obj.presence = iRParameterPresenceToJSON(message.presence);
    }
    if (message.count !== 0) {
      obj.count = iRParameterCountToJSON(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRParameter>, I>>(base?: I): IRParameter {
    return IRParameter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRParameter>, I>>(
    object: I,
  ): IRParameter {
    const message = createBaseIRParameter();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.presence = object.presence ?? 0;
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseIRProcessor(): IRProcessor {
  return { uri: "", parameters: [], metadata: {} };
}

export const IRProcessor = {
  encode(
    message: IRProcessor,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    for (const v of message.parameters) {
      IRParameter.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      IRProcessor_MetadataEntry.encode(
        { key: key as any, value },
        writer.uint32(26).fork(),
      ).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRProcessor {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRProcessor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameters.push(IRParameter.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = IRProcessor_MetadataEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRProcessor {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => IRParameter.fromJSON(e))
        : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: IRProcessor): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => IRParameter.toJSON(e));
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRProcessor>, I>>(base?: I): IRProcessor {
    return IRProcessor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRProcessor>, I>>(
    object: I,
  ): IRProcessor {
    const message = createBaseIRProcessor();
    message.uri = object.uri ?? "";
    message.parameters =
      object.parameters?.map((e) => IRParameter.fromPartial(e)) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseIRProcessor_MetadataEntry(): IRProcessor_MetadataEntry {
  return { key: "", value: "" };
}

export const IRProcessor_MetadataEntry = {
  encode(
    message: IRProcessor_MetadataEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): IRProcessor_MetadataEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRProcessor_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRProcessor_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: IRProcessor_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRProcessor_MetadataEntry>, I>>(
    base?: I,
  ): IRProcessor_MetadataEntry {
    return IRProcessor_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRProcessor_MetadataEntry>, I>>(
    object: I,
  ): IRProcessor_MetadataEntry {
    const message = createBaseIRProcessor_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseIRArgument(): IRArgument {
  return { name: "", value: [] };
}

export const IRArgument = {
  encode(
    message: IRArgument,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.value) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRArgument {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRArgument {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: globalThis.Array.isArray(object?.value)
        ? object.value.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: IRArgument): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value?.length) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRArgument>, I>>(base?: I): IRArgument {
    return IRArgument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRArgument>, I>>(
    object: I,
  ): IRArgument {
    const message = createBaseIRArgument();
    message.name = object.name ?? "";
    message.value = object.value?.map((e) => e) || [];
    return message;
  },
};

function createBaseIRStage(): IRStage {
  return { uri: "", processorUri: "", arguments: [] };
}

export const IRStage = {
  encode(
    message: IRStage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.processorUri !== "") {
      writer.uint32(18).string(message.processorUri);
    }
    for (const v of message.arguments) {
      IRArgument.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IRStage {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIRStage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processorUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.arguments.push(IRArgument.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IRStage {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      processorUri: isSet(object.processorUri)
        ? globalThis.String(object.processorUri)
        : "",
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => IRArgument.fromJSON(e))
        : [],
    };
  },

  toJSON(message: IRStage): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.processorUri !== "") {
      obj.processorUri = message.processorUri;
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => IRArgument.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IRStage>, I>>(base?: I): IRStage {
    return IRStage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IRStage>, I>>(object: I): IRStage {
    const message = createBaseIRStage();
    message.uri = object.uri ?? "";
    message.processorUri = object.processorUri ?? "";
    message.arguments =
      object.arguments?.map((e) => IRArgument.fromPartial(e)) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
